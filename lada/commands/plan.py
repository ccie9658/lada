"""
Plan command implementation for LADA.

Generates structured implementation plans using AI models.
"""

from pathlib import Path
from typing import Optional
import typer
from rich.console import Console
from rich.panel import Panel
from rich.markdown import Markdown

from lada.models import ModelRegistry, LLMException, LLMConnectionError
from lada.config import ConfigManager

console = Console()


async def plan_mode(file: Path, model: Optional[str] = None, output: Optional[Path] = None):
    """
    Generates an implementation plan for a file or module.

    Args:
        file: The target file or module to plan
        model: The LLM model to use for plan generation. If None, uses config default.
        output: Optional path to save the generated plan
    """
    console.print(
        Panel.fit(
            f"📋 [bold cyan]Planning Mode[/bold cyan]\n"
            f"Target: [green]{file}[/green]",
            border_style="cyan",
        )
    )

    # Initialize configuration and registry
    config_manager = ConfigManager()
    config = config_manager.config
    registry = ModelRegistry()

    # Use config default if no model specified
    if model is None:
        model = config.model.get_model_for_mode('plan')
        console.print(f"[dim]Using configured plan model: {model}[/dim]")
    
    try:
        llm = registry.get_llm(model)
        engine, model_name = registry._parse_model_name(model)

        # Check if the LLM service is available
        if not await llm.is_available():
            if engine == "ollama":
                console.print("❌ [red]Error:[/red] Ollama is not running. Please start it with 'ollama serve'")
            elif engine == "mlx":
                console.print("❌ [red]Error:[/red] MLX server is not running. Please start it with 'python scripts/start_mlx_server.py'")
            else:
                console.print(f"❌ [red]Error:[/red] {engine.upper()} service is not running. Please ensure the service is active.")
            return

        # Read the target file
        if not file.exists():
            console.print(f"❌ [red]Error:[/red] File '{file}' not found.")
            return
        
        try:
            file_content = file.read_text()
        except Exception as e:
            console.print(f"❌ [red]Error reading file:[/red] {e}")
            return

        # Load prompt template
        prompt_path = Path(__file__).parent.parent / "prompts" / "plan.txt"
        try:
            prompt_template = prompt_path.read_text()
        except Exception as e:
            console.print(f"❌ [red]Error loading prompt template:[/red] {e}")
            return

        # Prepare prompt
        prompt = prompt_template.format(
            filename=file.name,
            file_content=file_content[:5000],  # Limit to 5000 chars for context window
            project_context=f"Working on file: {file.absolute()}"
        )

        # Generate plan using LLM
        console.print(f"[dim]Generating plan using {model}...[/dim]")
        with console.status("[dim]Thinking...[/dim]", spinner="dots"):
            response = await llm.generate(prompt)
        
        plan_content = f"# Implementation Plan for {file.name}\n\n"
        plan_content += f"*Generated by LADA using {model}*\n\n"
        plan_content += response.content

        # Display preview of the plan
        console.print("\n[bold blue]Generated Plan Preview:[/bold blue]")
        console.print(Panel(
            Markdown(response.content[:1000] + "..." if len(response.content) > 1000 else response.content),
            border_style="blue",
            padding=(1, 2)
        ))
        
        # Determine output path
        output_path = output or Path(f".lada/plans/{file.stem}.plan.md")
        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(plan_content)
        console.print(f"\n🎉 Plan generated and saved to [green]{output_path}[/green]")

    except LLMConnectionError as e:
        console.print(f"❌ [red]Connection Error:[/red] {e}")
    except LLMException as e:
        console.print(f"❌ [red]Error:[/red] {e}")
    except Exception as e:
        console.print(f"❌ [red]Unexpected Error:[/red] {e}")

